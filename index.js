const TweetModel = require("./Models/TweetModel");
const UserModel = require("./Models/UserModel");
const TweetRouter = require('./Routes/TweetRoutes');
const UserRouter = require('./Routes/UserRoutes');
const QueryRoutes = require('./Routes/QueryRoutes');
const express = require('express');
const Data = require("./Data");
const QueryModel = require("./Models/QueryModel");
var app = express(); 

const PORT = process.env.PORT || 8080;


Data.SSHDBconnect().then(async ()=>{
    Data.Database.connect((err)=>{
        console.log(err)
    });
    


    app.use('/tweet', TweetRouter);
    app.use('/user', UserRouter);
    app.use('/query', QueryRoutes)
    app.use(express.static(__dirname+'/Public'));
    app.listen(PORT, ()=>{
        console.log("App listening on port" + PORT);
    })
    
    
    let all = [
        '1346980076068376580',
        '1346914190452260866',
        '1347010669216899073',
        '1347006293903618049',
        '1346939647071576065',
        '1346953328761176071',
        '1346954403555643392',
        '1346914190452260866',
        '1346919365858349056',
        '1346917720969805824',
        '1347209760333037568',
        '1347212947089711110',
        '1347280066577915906',
        '1347246873833312256',
        '1347217941113266176',
        '1347205904291176448',
        '1347238456108453897',
        '1347197946270519304',
        '1347236281223405568',
        '1347228055627042816',
        '1347311068226478081',
        '1347323938892775424',
        '1347102248120279040',
        '1347328477771362304',
        '1346593077968908293',
        '1347545286126817280',
        '1347551408820789250',
        '1347587486994857985',
        '1347584752778420224',
        '1347573194538975232',
        '1347507878651944962',
        '1347571239137779719',
        '1347676163922038785',
        '1347548109992325123',
        '1347568383760461829',
        '1347540605497389056',
        '1346115139439906817',
        '1347536333502255104',
        '1347668994921091072',
        '1347686137679155202',
        '1347656114217877511',
        '1347586623177969671',
        '1347710788027478017',
        '1347737058714988545',
        '1347600139616198658',
        '1347943691290353665',
        '1347954303567278081',
        '1347959472522633216',
        '1347954068962959360',
        '1347965027584778240',
        '1347970986503712768',
        '1347947973343399937',
        '1347951600443207680',
        '1347961788088741894',
        '1347956248470282240',
        '1347924858605367296',
        '1347997420152627201',
        '1347996558550126592',
        '1348006690692636672',
        '1348075932846845954',
        '1348085071241043968',
        '1347643181131730950',
        '1347777481969905666',
        '1347937567103188994',
        '1348068960575639553',
        '1347948169963835392',
        '1347966636490436609',
        '1347953278693253127',
        '1347982507937972224',
        '1348006162743107587',
        '1348322819407556614',
        '1348300367176499201',
        '1348317564879990784',
        '1348386199308795905',
        '1348297996803387393',
        '1348248244871041026',
        '1347977279742173184',
        '1348344287491215369',
        '1348308821450616832',
        '1348342269741387777',
        '1348332779835158531',
        '1348294369636454403',
        '1348358068309024775',
        '1348367066328301568',
        '1348427290674409474',
        '1348337895032160256',
        '1348418865999581185',
        '1348248244871041026',
        '1348363251185295370',
        '1348302378819268611',
        '1348366390974148610',
        '1348268409205776393',
        '1348303957412597760',
        '1348132246184546304',
        '1348318557604515841',
        '1348360113711677440',
        '1348399929585250305',
        '1348414688674111489',
        '1348268869543198721',
        '1348370061984223237',
    ]
    /* all.forEach(async (l)=>{
        try{
            let data = await TweetModel.getFromAPI(l);
            await data.insertToDatabase();
            console.log("DOne");
        } catch (e){
            console.error(e)
        }
    }) */

    const delay = ms => new Promise(res => setTimeout(res, ms));

    // QueryModel.createNew(`(vacuna OR vaccine) AND (covid OR SARS-CoV-2 OR coronavirus)  AND MÃ©xico`);
    QueryModel.read({queryID: 29}).then(async query=>{
        console.log(query[0].query)
        while(true){
            await query[0].execute();
            await delay(1*60*1000);
        }
    })

})

